from sklearn.datasets import load_files
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load the cat vs dog dataset from Kaggle (download and replace path)
data = load_files(container_path='path/to/cats_vs_dogs', shuffle=True, random_state=42)

# Separate features (images) and target labels (cat/dog)
X = data.data
y = data.target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape images (assuming grayscale images)
X_train = X_train.reshape(-1, 64 * 64)  # Replace with image size if different
X_test = X_test.reshape(-1, 64 * 64)

# Standardize pixel intensities (optional but recommended)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train the SVM model
svm_model = SVC(kernel='linear')  # Experiment with different kernels
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Evaluate model accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.4f}")

# You can further use the model to predict on new images
new_image = ...  # Load your new image data (reshape if necessary)
new_prediction = svm_model.predict(new_image.reshape(1, -1))  # Predict for single image
print(f"Predicted Class: {new_prediction[0]} (Cat: 0, Dog: 1)")
